@page "/admin/index"
@inject IJSRuntime JsRuntime
@inject IHttpClientFactory _clientFactory
@inject NavigationManager NavManager
<h3>Weather in Belfast</h3>
@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h3">@errorString</div>
}
else if (forecast is null)
{
    <div class="h4">loading forecast..</div>
}
else
{
    <table class="table table-bordered">
        <thead class="thead-light">
            <tr>
                <th>Date</th>
                <th>Weather</th>
                <th>Temp</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var weather in forecast.Consolidated_weather)
            {
                // only want 5 results
                count++;
                if (count < 6) // zero based index
                {
                    <tr>
                        <td>@weather.Applicable_date</td>
                        <td>@weather.Weather_state_name</td>
                        <td>@weather.The_temp</td>
                        <td><img id="weatherImage" alt="@weather.Weather_state_name" src="https://www.metaweather.com//static/img/weather/@(weather.Weather_state_abbr).svg" /></td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {

    BlazorWeatherApp.Model.WeatherForecastModel forecast;
    public int count = 0;
    public string errorString;
    public bool errorstate = false;
    public string myCookieValue = "";
    public static string URIKey = "metaweather";
    public static string URIPath = "location/44544/";

    protected async Task ReadCookies()
    {
        myCookieValue = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "weatherforecast");
    }

    protected override async Task OnInitializedAsync()
    {
        //read the cookies and get the value
        await ReadCookies();
        // if it's true then we show the weather
        if (myCookieValue == "true")
        {
            // use client factory to ensure the requests are closed and safely disposed of
            var client = _clientFactory.CreateClient(URIKey);
            try
            {
                forecast = await client.GetFromJsonAsync<WeatherForecastModel>(URIPath);
                errorString = null;
            }
            catch (Exception ex)
            {
                errorString = $"There was an error: {ex.Message}";
            }
        }
        else //otherwise redirect back to index
        {
            NavManager.NavigateTo("/index");
        }
    }
}
